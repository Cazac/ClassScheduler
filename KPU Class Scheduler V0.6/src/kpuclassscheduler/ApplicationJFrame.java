package kpuclassscheduler;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


//@author Zachary Blouin

public class ApplicationJFrame extends javax.swing.JFrame {
//Creates new form ApplicationJFrame
    
    public ApplicationJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SeasonButtonGroup = new javax.swing.ButtonGroup();
        CampusButtonGroup = new javax.swing.ButtonGroup();
        CourseYearTakenButtonGroup = new javax.swing.ButtonGroup();
        TimeButtonGroup = new javax.swing.ButtonGroup();
        DayOfTheWeekButtonGroup = new javax.swing.ButtonGroup();
        MainTabbedPane = new javax.swing.JTabbedPane();
        SchedulePanel = new javax.swing.JPanel();
        Calculate_TeachersToSections_ = new javax.swing.JButton();
        Calculate_ClassesToSections_ = new javax.swing.JButton();
        ScheduleTeacher_ComboBox_ = new javax.swing.JComboBox<>();
        jScrollPane12 = new javax.swing.JScrollPane();
        ScheduleList = new javax.swing.JList<>();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        Refresh_Schedule_ = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ScheduleTimeTable = new javax.swing.JTable();
        PDF_SelectedTeacherSchedule_ = new javax.swing.JButton();
        ScheduleSemester_ComboBox_ = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        SectionPanel = new javax.swing.JPanel();
        Add_Section_ = new javax.swing.JButton();
        RemoveSection = new javax.swing.JButton();
        Time7_10amRB = new javax.swing.JRadioButton();
        Time10_1RB = new javax.swing.JRadioButton();
        Time1_4RB = new javax.swing.JRadioButton();
        Time4_7RB = new javax.swing.JRadioButton();
        Time7_10pmRB = new javax.swing.JRadioButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        SectionList = new javax.swing.JList<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        SectionCourseList = new javax.swing.JList<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        SectionSemesterList = new javax.swing.JList<>();
        jScrollPane11 = new javax.swing.JScrollPane();
        SectionLocationList = new javax.swing.JList<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        Refresh_Section_ = new javax.swing.JButton();
        MondayRB = new javax.swing.JRadioButton();
        TuesdayRB = new javax.swing.JRadioButton();
        ThursdayRB = new javax.swing.JRadioButton();
        WednesdayRB = new javax.swing.JRadioButton();
        FridayRB = new javax.swing.JRadioButton();
        CRNTF = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        SectionIDTF = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        SectionTeacherList = new javax.swing.JList<>();
        jLabel37 = new javax.swing.JLabel();
        NullTimeRB = new javax.swing.JRadioButton();
        NullDayRB = new javax.swing.JRadioButton();
        SectionTeacher_CheckBox_ = new javax.swing.JCheckBox();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        SectionLocation_CheckBox_ = new javax.swing.JCheckBox();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        TeacherPanel = new javax.swing.JPanel();
        TeacherIDTF = new javax.swing.JTextField();
        FirstNameTF = new javax.swing.JTextField();
        LastNameTF = new javax.swing.JTextField();
        TeacherMoveRight = new javax.swing.JButton();
        TeacherMoveLeft = new javax.swing.JButton();
        Add_Teacher_ = new javax.swing.JButton();
        Remove_Teacher_ = new javax.swing.JButton();
        Refresh_Teacher_ = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TeacherListLeft = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TeacherListRight = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        TeacherList = new javax.swing.JList<>();
        jScrollPane14 = new javax.swing.JScrollPane();
        TeachersCourseList = new javax.swing.JList<>();
        Show_TeachableCourses_ = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        CoursePanel = new javax.swing.JPanel();
        Add_Course_ = new javax.swing.JButton();
        Remove_Course_ = new javax.swing.JButton();
        Refresh_Course_ = new javax.swing.JButton();
        CourseIDTF = new javax.swing.JTextField();
        CourseNameTF = new javax.swing.JTextField();
        Year1RB = new javax.swing.JRadioButton();
        Year2RB = new javax.swing.JRadioButton();
        Year3RB = new javax.swing.JRadioButton();
        Year4RB = new javax.swing.JRadioButton();
        Computer_CourseCB = new javax.swing.JCheckBox();
        ProgramComboBox = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        CourseList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        SemesterPanel = new javax.swing.JPanel();
        Add_Semester_ = new javax.swing.JButton();
        Remove_Semester_ = new javax.swing.JButton();
        Refresh_Semester_ = new javax.swing.JButton();
        SpringRB = new javax.swing.JRadioButton();
        SummerRB = new javax.swing.JRadioButton();
        FallRB = new javax.swing.JRadioButton();
        WinterRB = new javax.swing.JRadioButton();
        YearTF = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        SemesterList = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        LocationPanel = new javax.swing.JPanel();
        Add_Location_ = new javax.swing.JButton();
        Remove_Location_ = new javax.swing.JButton();
        Refresh_Location_ = new javax.swing.JButton();
        RoomTF = new javax.swing.JTextField();
        SurreyRB = new javax.swing.JRadioButton();
        RichmondRB = new javax.swing.JRadioButton();
        LangleyRB = new javax.swing.JRadioButton();
        CloverdaleRB = new javax.swing.JRadioButton();
        Computer_LocationCB = new javax.swing.JCheckBox();
        jScrollPane8 = new javax.swing.JScrollPane();
        LocationList = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KPU Class Scheduler 2018");
        setBackground(new java.awt.Color(140, 140, 140));

        MainTabbedPane.setBackground(new java.awt.Color(140, 140, 140));
        MainTabbedPane.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        MainTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        SchedulePanel.setBackground(new java.awt.Color(130, 130, 130));

        Calculate_TeachersToSections_.setText("Auto Assign Teachers To Sections");
        Calculate_TeachersToSections_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Calculate_TeachersToSections_ActionPerformed(evt);
            }
        });

        Calculate_ClassesToSections_.setText("Auto Assign Location And Time To Sections");
        Calculate_ClassesToSections_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Calculate_ClassesToSections_ActionPerformed(evt);
            }
        });

        ScheduleTeacher_ComboBox_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleTeacher_ComboBox_ActionPerformed(evt);
            }
        });

        ScheduleList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ScheduleList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane12.setViewportView(ScheduleList);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Teachers");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Sections");

        Refresh_Schedule_.setText("Refresh Data");
        Refresh_Schedule_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Schedule_ActionPerformed(evt);
            }
        });

        jLabel34.setBackground(new java.awt.Color(255, 51, 51));
        jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel35.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel35.setText("jLabel35");
        jLabel35.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel35.setMinimumSize(new java.awt.Dimension(200, 200));

        ScheduleTimeTable.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ScheduleTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"7am - 9:50am", "", null, null, null, null, null},
                {"10am - 12:50pm", null, null, null, null, null, null},
                {"1pm - 3:50pm", null, null, null, null, null, null},
                {"4pm - 6:50pm", null, null, null, null, null, null},
                {"7pm - 9:50pm", null, null, null, null, null, null}
            },
            new String [] {
                "Times", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "No Date"
            }
        ));
        ScheduleTimeTable.setColumnSelectionAllowed(true);
        ScheduleTimeTable.setRowHeight(75);
        ScheduleTimeTable.setSelectionBackground(new java.awt.Color(0, 153, 204));
        ScheduleTimeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(ScheduleTimeTable);
        ScheduleTimeTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (ScheduleTimeTable.getColumnModel().getColumnCount() > 0) {
            ScheduleTimeTable.getColumnModel().getColumn(0).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(1).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(2).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(3).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(4).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(5).setResizable(false);
            ScheduleTimeTable.getColumnModel().getColumn(6).setResizable(false);
        }

        PDF_SelectedTeacherSchedule_.setText("Create Printable PDF for Selected Teacher Schedule");
        PDF_SelectedTeacherSchedule_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PDF_SelectedTeacherSchedule_ActionPerformed(evt);
            }
        });

        ScheduleSemester_ComboBox_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleSemester_ComboBox_ActionPerformed(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel39.setText("Semester");

        jLabel40.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setText("Auto Schedule");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel45.setText("PDF Creation");

        javax.swing.GroupLayout SchedulePanelLayout = new javax.swing.GroupLayout(SchedulePanel);
        SchedulePanel.setLayout(SchedulePanelLayout);
        SchedulePanelLayout.setHorizontalGroup(
            SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(SchedulePanelLayout.createSequentialGroup()
                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SchedulePanelLayout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SchedulePanelLayout.createSequentialGroup()
                                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SchedulePanelLayout.createSequentialGroup()
                                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel44)
                                            .addComponent(Calculate_TeachersToSections_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(PDF_SelectedTeacherSchedule_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Calculate_ClassesToSections_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ScheduleSemester_ComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ScheduleTeacher_ComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Refresh_Schedule_, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19)
                                            .addComponent(jLabel39)))
                                    .addComponent(jLabel45))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SchedulePanelLayout.setVerticalGroup(
            SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SchedulePanelLayout.createSequentialGroup()
                .addComponent(jLabel34)
                .addGap(0, 0, 0)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SchedulePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel20)
                                .addComponent(jLabel39)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SchedulePanelLayout.createSequentialGroup()
                                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Calculate_ClassesToSections_)
                                    .addComponent(ScheduleSemester_ComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Calculate_TeachersToSections_)
                                    .addComponent(jLabel19))
                                .addGap(0, 0, 0)
                                .addComponent(ScheduleTeacher_ComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel45)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(SchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PDF_SelectedTeacherSchedule_)
                                    .addComponent(Refresh_Schedule_)))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        MainTabbedPane.addTab("   Schedule   ", SchedulePanel);

        SectionPanel.setBackground(new java.awt.Color(130, 130, 130));

        Add_Section_.setText("Add Section");
        Add_Section_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Section_ActionPerformed(evt);
            }
        });

        RemoveSection.setText("Remove Section");
        RemoveSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSectionActionPerformed(evt);
            }
        });

        TimeButtonGroup.add(Time7_10amRB);
        Time7_10amRB.setText("7am - 9:50am");

        TimeButtonGroup.add(Time10_1RB);
        Time10_1RB.setText("10am - 12:50pm");

        TimeButtonGroup.add(Time1_4RB);
        Time1_4RB.setText("1pm - 3:50pm");

        TimeButtonGroup.add(Time4_7RB);
        Time4_7RB.setText("4pm - 6:50pm");

        TimeButtonGroup.add(Time7_10pmRB);
        Time7_10pmRB.setText("7pm - 9:50pm");

        SectionList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(SectionList);

        SectionCourseList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane9.setViewportView(SectionCourseList);

        SectionSemesterList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SectionSemesterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane10.setViewportView(SectionSemesterList);

        SectionLocationList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SectionLocationList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane11.setViewportView(SectionLocationList);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("Time");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel26.setText("Course");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setText("Location");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setText("Semester");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel29.setText("Current Sections");

        Refresh_Section_.setText("Refresh Data");
        Refresh_Section_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Section_ActionPerformed(evt);
            }
        });

        DayOfTheWeekButtonGroup.add(MondayRB);
        MondayRB.setText("Monday");

        DayOfTheWeekButtonGroup.add(TuesdayRB);
        TuesdayRB.setText("Tuesday");

        DayOfTheWeekButtonGroup.add(ThursdayRB);
        ThursdayRB.setText("Thursday");

        DayOfTheWeekButtonGroup.add(WednesdayRB);
        WednesdayRB.setText("Wednsday");

        DayOfTheWeekButtonGroup.add(FridayRB);
        FridayRB.setText("Friday");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel32.setText("Course Refference Number (CRN)");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setText("Day");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText("Section ID");

        SectionTeacherList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        SectionTeacherList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane13.setViewportView(SectionTeacherList);

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setText("Teachers");

        TimeButtonGroup.add(NullTimeRB);
        NullTimeRB.setSelected(true);
        NullTimeRB.setText("Set No Time");

        DayOfTheWeekButtonGroup.add(NullDayRB);
        NullDayRB.setSelected(true);
        NullDayRB.setText("Set No Day");

        SectionTeacher_CheckBox_.setText("Set No Teacher");
        SectionTeacher_CheckBox_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SectionTeacher_CheckBox_ActionPerformed(evt);
            }
        });

        jLabel41.setBackground(new java.awt.Color(255, 51, 51));
        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel43.setText("jLabel35");
        jLabel43.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel43.setMinimumSize(new java.awt.Dimension(200, 200));

        SectionLocation_CheckBox_.setText("Set No Location");
        SectionLocation_CheckBox_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SectionLocation_CheckBox_ActionPerformed(evt);
            }
        });

        jLabel58.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel58.setText("Ex. S10");

        jLabel59.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel59.setText("Ex. 1002986556");

        javax.swing.GroupLayout SectionPanelLayout = new javax.swing.GroupLayout(SectionPanel);
        SectionPanel.setLayout(SectionPanelLayout);
        SectionPanelLayout.setHorizontalGroup(
            SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SectionPanelLayout.createSequentialGroup()
                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SectionPanelLayout.createSequentialGroup()
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(SectionPanelLayout.createSequentialGroup()
                                .addComponent(CRNTF, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SectionIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(156, 156, 156))
                    .addGroup(SectionPanelLayout.createSequentialGroup()
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32)
                            .addComponent(jLabel27)
                            .addComponent(jLabel28)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SectionLocation_CheckBox_))
                        .addGap(16, 16, 16)
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SectionPanelLayout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addGap(346, 346, 346))
                            .addGroup(SectionPanelLayout.createSequentialGroup()
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(SectionPanelLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SectionTeacher_CheckBox_)))
                                    .addComponent(jLabel26)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel37))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SectionPanelLayout.createSequentialGroup()
                                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(WednesdayRB)
                                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(NullDayRB)
                                            .addComponent(MondayRB)
                                            .addComponent(TuesdayRB)
                                            .addComponent(ThursdayRB)
                                            .addComponent(FridayRB)
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(NullTimeRB)
                                            .addComponent(Time7_10amRB)
                                            .addComponent(Time10_1RB)
                                            .addComponent(Time1_4RB)
                                            .addComponent(Time4_7RB)
                                            .addComponent(Time7_10pmRB))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SectionPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Refresh_Section_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Add_Section_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(RemoveSection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
            .addGroup(SectionPanelLayout.createSequentialGroup()
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        SectionPanelLayout.setVerticalGroup(
            SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SectionPanelLayout.createSequentialGroup()
                .addComponent(jLabel41)
                .addGap(0, 0, 0)
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SectionPanelLayout.createSequentialGroup()
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SectionPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel36)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SectionPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel33))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SectionPanelLayout.createSequentialGroup()
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(SectionPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel58)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(SectionPanelLayout.createSequentialGroup()
                                        .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(CRNTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(SectionIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel59)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel28)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel37))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SectionTeacher_CheckBox_)
                                    .addComponent(SectionLocation_CheckBox_)))
                            .addGroup(SectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(SectionPanelLayout.createSequentialGroup()
                                    .addComponent(NullDayRB)
                                    .addGap(0, 0, 0)
                                    .addComponent(MondayRB)
                                    .addGap(1, 1, 1)
                                    .addComponent(TuesdayRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(WednesdayRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ThursdayRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(FridayRB)
                                    .addGap(24, 24, 24)
                                    .addComponent(jLabel25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(NullTimeRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Time7_10amRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Time10_1RB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Time1_4RB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Time4_7RB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Time7_10pmRB)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Refresh_Section_)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Add_Section_)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(RemoveSection))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainTabbedPane.addTab("   Section   ", SectionPanel);

        TeacherPanel.setBackground(new java.awt.Color(130, 130, 130));

        FirstNameTF.setToolTipText("");
        FirstNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameTFActionPerformed(evt);
            }
        });

        TeacherMoveRight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TeacherMoveRight.setText("-->");
        TeacherMoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeacherMoveRightActionPerformed(evt);
            }
        });

        TeacherMoveLeft.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TeacherMoveLeft.setText("<--");
        TeacherMoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeacherMoveLeftActionPerformed(evt);
            }
        });

        Add_Teacher_.setText("Add Teacher");
        Add_Teacher_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Teacher_ActionPerformed(evt);
            }
        });

        Remove_Teacher_.setText("Remove Teacher");
        Remove_Teacher_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_Teacher_ActionPerformed(evt);
            }
        });

        Refresh_Teacher_.setText("Refresh Data");
        Refresh_Teacher_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Teacher_ActionPerformed(evt);
            }
        });

        TeacherListLeft.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(TeacherListLeft);

        TeacherListRight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setViewportView(TeacherListRight);

        TeacherList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TeacherList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(TeacherList);

        TeachersCourseList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        TeachersCourseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane14.setViewportView(TeachersCourseList);

        Show_TeachableCourses_.setText("Show Teachable Courses");
        Show_TeachableCourses_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_TeachableCourses_ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("KPU Staff ID");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("First Name");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Last Name");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("All Courses");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Teachable Courses");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel24.setText("Current Teachers");

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel1.setText("Ex. 100100100");

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel38.setText("Teachable Courses");

        jLabel46.setBackground(new java.awt.Color(255, 51, 51));
        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel50.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel54.setText("jLabel35");
        jLabel54.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel54.setMinimumSize(new java.awt.Dimension(200, 200));

        jLabel60.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel60.setText("Ex. John");

        jLabel61.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel61.setText("Ex. Doe");

        javax.swing.GroupLayout TeacherPanelLayout = new javax.swing.GroupLayout(TeacherPanel);
        TeacherPanel.setLayout(TeacherPanelLayout);
        TeacherPanelLayout.setHorizontalGroup(
            TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TeacherIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                                        .addGap(320, 320, 320)
                                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(Show_TeachableCourses_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Refresh_Teacher_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Add_Teacher_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Remove_Teacher_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addComponent(FirstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TeacherMoveRight)
                                            .addComponent(TeacherMoveLeft)))
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TeacherPanelLayout.setVerticalGroup(
            TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TeacherPanelLayout.createSequentialGroup()
                .addComponent(jLabel46)
                .addGap(0, 0, 0)
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel38)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TeacherPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)))))
                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TeacherIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FirstNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LastNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel60)
                                    .addComponent(jLabel61))
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1)
                                            .addComponent(jScrollPane2)))
                                    .addGroup(TeacherPanelLayout.createSequentialGroup()
                                        .addGap(0, 169, Short.MAX_VALUE)
                                        .addComponent(TeacherMoveRight)
                                        .addGap(148, 148, 148)
                                        .addComponent(TeacherMoveLeft)
                                        .addGap(52, 52, 52)
                                        .addComponent(Refresh_Teacher_)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Show_TeachableCourses_)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Add_Teacher_)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Remove_Teacher_))))
                            .addGroup(TeacherPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(TeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane14))))
                        .addGap(10, 10, 10))))
        );

        MainTabbedPane.addTab("   Teacher   ", TeacherPanel);

        CoursePanel.setBackground(new java.awt.Color(130, 130, 130));

        Add_Course_.setText("Add Course");
        Add_Course_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Course_ActionPerformed(evt);
            }
        });

        Remove_Course_.setText("Remove Course");
        Remove_Course_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_Course_ActionPerformed(evt);
            }
        });

        Refresh_Course_.setText("Refresh Data");
        Refresh_Course_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Course_ActionPerformed(evt);
            }
        });

        CourseIDTF.setToolTipText("Course ID");

        CourseYearTakenButtonGroup.add(Year1RB);
        Year1RB.setSelected(true);
        Year1RB.setText("Year 1");

        CourseYearTakenButtonGroup.add(Year2RB);
        Year2RB.setText("Year 2");

        CourseYearTakenButtonGroup.add(Year3RB);
        Year3RB.setText("Year 3");

        CourseYearTakenButtonGroup.add(Year4RB);
        Year4RB.setText("Year 4");

        Computer_CourseCB.setText("Computers");

        ProgramComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anthropology", "Arts", "Asian Studies", "Counselling", "Creative Writing", "Criminology", "Education Assistant", "English", "Fine Arts", "General Studies", "Geography", "History", "Indigenous Community Justice", "Journalism", "Language and Cultures", "Music", "NGOs & Nonprofit Studies", "Philosohy", "Policy Studies", "Political Science", "Psychology", "Sociology", "Accounting", "Business Administration", "Business General Studies", "Business Management", "Computer Information Systems", "Economics", "Entrepreneurial Leadership", "Human Resources Management", "Information Technology", "Legal Administrative Studies", "Marketing", "Operations & Supply Chain Management", "Public Relations", "Technical Management & Services", "Fashion & Technology", "Fashion Marketing", "Foundations in Design", "Graphic Design for Marketing", "Interior Design", "Product Design", "Technical Apparel Design", "Health Care Assistant", "Health Foundations", "Health Unit Coordinator", "Nursing", "Psychiatric Nursing", "Traditional Chinese Medicine - Acupuncture", "Biology", "Brewing and Brewery Operations", "Chemistry", "Computer Aided Design & Drafting", "Engineering", "Environmental Protection Technology", "General Science", "Health Science", "Horticulture", "Mathematics", "Physics", "Plant Health", "Sustainable Agriculture", "Urban Ecosystems", "Advanced Farrier Training", "Appliance Servicing", "Automotive Service Technician", "Carpentry/Building Construction", "Construction Electrician", "Masonry", "Metal Fabrication/Fitter", "Millwright/Industrial Mechanic", "Outdoor Power Equipment Technician", "Parts, Warehousing, Logistics & Distribution", "Plumbing and Piping", "Plumbing", "Power Line Technician", "Public Safety Communications", "Welding", "Arborist Technician", "Automotive Service Technician", "Building Envelope Technician", "Carpentry/Building Construction", "Climbing Arborist", "Construction Electrician", "Industrial Mechanic/Millwright", "Landscape Horticulture", "Metal Fabrication", "Parts & Warehousing", "Plumbing", "Production Horticulture", "Welding" }));

        CourseList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane7.setViewportView(CourseList);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Course Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Course ID");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel4.setText("Ex. INFO1111");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel5.setText("Ex. Programming 1");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Year Course Should Be Taken");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Program");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Course Requires Computer");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Current Courses");

        jLabel47.setBackground(new java.awt.Color(255, 51, 51));
        jLabel47.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel55.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel55.setText("jLabel35");
        jLabel55.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel55.setMinimumSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout CoursePanelLayout = new javax.swing.GroupLayout(CoursePanel);
        CoursePanel.setLayout(CoursePanelLayout);
        CoursePanelLayout.setHorizontalGroup(
            CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CoursePanelLayout.createSequentialGroup()
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(CoursePanelLayout.createSequentialGroup()
                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CoursePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Remove_Course_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Add_Course_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Refresh_Course_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(CoursePanelLayout.createSequentialGroup()
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CoursePanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(CourseIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(CoursePanelLayout.createSequentialGroup()
                                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CourseNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(ProgramComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(CoursePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Year1RB)
                                    .addComponent(Year2RB)
                                    .addComponent(Year4RB)
                                    .addComponent(Year3RB))
                                .addGap(28, 28, 28)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Computer_CourseCB)
                                    .addComponent(jLabel8))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGap(50, 50, 50))
        );
        CoursePanelLayout.setVerticalGroup(
            CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CoursePanelLayout.createSequentialGroup()
                .addComponent(jLabel47)
                .addGap(0, 0, 0)
                .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CoursePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel21)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CoursePanelLayout.createSequentialGroup()
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CourseIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CourseNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProgramComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Year1RB)
                                    .addComponent(Computer_CourseCB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Year2RB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Year4RB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Year3RB))
                            .addGroup(CoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(CoursePanelLayout.createSequentialGroup()
                                    .addComponent(Refresh_Course_)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Add_Course_)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Remove_Course_))
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(CoursePanelLayout.createSequentialGroup()
                        .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        MainTabbedPane.addTab("   Course   ", CoursePanel);

        SemesterPanel.setBackground(new java.awt.Color(130, 130, 130));

        Add_Semester_.setText("Add Semester");
        Add_Semester_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Semester_ActionPerformed(evt);
            }
        });

        Remove_Semester_.setText("Remove Semester");
        Remove_Semester_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_Semester_ActionPerformed(evt);
            }
        });

        Refresh_Semester_.setText("Refresh Data");
        Refresh_Semester_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Semester_ActionPerformed(evt);
            }
        });

        SeasonButtonGroup.add(SpringRB);
        SpringRB.setSelected(true);
        SpringRB.setText("Spring");

        SeasonButtonGroup.add(SummerRB);
        SummerRB.setText("Summer");

        SeasonButtonGroup.add(FallRB);
        FallRB.setText("Fall");

        SeasonButtonGroup.add(WinterRB);
        WinterRB.setText("Winter");

        SemesterList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane6.setViewportView(SemesterList);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Season");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Year");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setText("Current Semesters");

        jLabel30.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel30.setText("Ex. 2018");

        jLabel48.setBackground(new java.awt.Color(255, 51, 51));
        jLabel48.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel52.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel56.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel56.setText("jLabel35");
        jLabel56.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel56.setMinimumSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout SemesterPanelLayout = new javax.swing.GroupLayout(SemesterPanel);
        SemesterPanel.setLayout(SemesterPanelLayout);
        SemesterPanelLayout.setHorizontalGroup(
            SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SemesterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SemesterPanelLayout.createSequentialGroup()
                        .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SemesterPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SpringRB)
                                    .addComponent(SummerRB)
                                    .addComponent(FallRB)
                                    .addComponent(WinterRB))
                                .addGap(16, 16, 16)
                                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(YearTF, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SemesterPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Remove_Semester_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Add_Semester_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Refresh_Semester_, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50))
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)))
        );
        SemesterPanelLayout.setVerticalGroup(
            SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SemesterPanelLayout.createSequentialGroup()
                .addComponent(jLabel48)
                .addGap(0, 0, 0)
                .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SemesterPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SemesterPanelLayout.createSequentialGroup()
                                .addComponent(Refresh_Semester_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Add_Semester_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Remove_Semester_))
                            .addGroup(SemesterPanelLayout.createSequentialGroup()
                                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(SemesterPanelLayout.createSequentialGroup()
                                        .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(SpringRB)
                                            .addComponent(YearTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(SemesterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel30)
                                            .addComponent(SummerRB))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FallRB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(WinterRB))
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        MainTabbedPane.addTab("   Semester   ", SemesterPanel);

        LocationPanel.setBackground(new java.awt.Color(130, 130, 130));

        Add_Location_.setText("Add Location");
        Add_Location_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Location_ActionPerformed(evt);
            }
        });

        Remove_Location_.setText("Remove Location");
        Remove_Location_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Remove_Location_ActionPerformed(evt);
            }
        });

        Refresh_Location_.setText("Refresh Data");
        Refresh_Location_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_Location_ActionPerformed(evt);
            }
        });

        CampusButtonGroup.add(SurreyRB);
        SurreyRB.setSelected(true);
        SurreyRB.setText("Surrey Campus");

        CampusButtonGroup.add(RichmondRB);
        RichmondRB.setText("Richmond Campus");

        CampusButtonGroup.add(LangleyRB);
        LangleyRB.setText("Langley Campus");

        CampusButtonGroup.add(CloverdaleRB);
        CloverdaleRB.setText("Cloverdale Campus");

        Computer_LocationCB.setText("Computers");

        LocationList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LocationList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane8.setViewportView(LocationList);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Campus");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Building And Room Number");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Comupters Avalible");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Current Locations");

        jLabel31.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel31.setText("Ex. Cedar 2045");

        jLabel49.setBackground(new java.awt.Color(255, 51, 51));
        jLabel49.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Banner.gif"))); // NOI18N

        jLabel53.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/Black.png"))); // NOI18N

        jLabel57.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kpuclassscheduler/RedBG3 2.png"))); // NOI18N
        jLabel57.setText("jLabel35");
        jLabel57.setMaximumSize(new java.awt.Dimension(200, 200));
        jLabel57.setMinimumSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout LocationPanelLayout = new javax.swing.GroupLayout(LocationPanel);
        LocationPanel.setLayout(LocationPanelLayout);
        LocationPanelLayout.setHorizontalGroup(
            LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LocationPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(LocationPanelLayout.createSequentialGroup()
                                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addComponent(SurreyRB)
                                            .addComponent(RichmondRB)
                                            .addComponent(LangleyRB))
                                        .addGap(38, 38, 38)
                                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(LocationPanelLayout.createSequentialGroup()
                                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel12)
                                                    .addComponent(RoomTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(48, 48, 48)
                                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel13)
                                                    .addComponent(Computer_LocationCB, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(CloverdaleRB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(LocationPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Remove_Location_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Add_Location_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Refresh_Location_, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(50, 50, 50))
                    .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 1369, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)))
        );
        LocationPanelLayout.setVerticalGroup(
            LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationPanelLayout.createSequentialGroup()
                .addComponent(jLabel49)
                .addGap(0, 0, 0)
                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LocationPanelLayout.createSequentialGroup()
                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LocationPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel23)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(LocationPanelLayout.createSequentialGroup()
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RoomTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(SurreyRB)
                                        .addComponent(Computer_LocationCB)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(LocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel31)
                                    .addComponent(RichmondRB))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LangleyRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CloverdaleRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Refresh_Location_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Add_Location_)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Remove_Location_))
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        MainTabbedPane.addTab("   Location   ", LocationPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1360, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    DefaultListModel SelectedDataModel = new DefaultListModel();
    
    List<String> ScheduleTeachersIDArray = new ArrayList<>();
    List<String> ScheduleSemesterYearIDArray = new ArrayList<>();
    List<String> ScheduleSemesterSeasonIDArray = new ArrayList<>();
   
    List<String> TeacherIDArray = new ArrayList<>();
  
    List<String> CourseIDArray = new ArrayList<>();
    
    List<String> SemesterYearIDArray = new ArrayList<>();
    List<String> SemesterSeasonIDArray = new ArrayList<>();
    
    List<String> LocationCampusIDArray = new ArrayList<>();
    List<String> LocationRoomIDArray = new ArrayList<>();
    
    
    List<String> SectionsIDArray = new ArrayList<>();
    List<String> SectionCourseIDArray = new ArrayList<>();
    List<String> SectionSemesterYearIDArray = new ArrayList<>();
    List<String> SectionSemesterSeasonIDArray = new ArrayList<>();
    List<String> SectionLocationCampusIDArray = new ArrayList<>();
    List<String> SectionLocationRoomIDArray = new ArrayList<>();
    List<String> SectionTeacherIDArray = new ArrayList<>();
    
    List<String> PDFCellArray = new ArrayList<>();
    
    int TableDataCounter = 1;
            
    String DataBlocks11 = "";
    String DataBlocks12 = "";
    String DataBlocks13 = "";
    String DataBlocks14 = "";
    String DataBlocks15 = "";
    String DataBlocks16 = "";

    String DataBlocks21 = "";
    String DataBlocks22 = "";
    String DataBlocks23 = "";
    String DataBlocks24 = "";
    String DataBlocks25 = "";
    String DataBlocks26 = "";

    String DataBlocks31 = "";
    String DataBlocks32 = "";
    String DataBlocks33 = "";
    String DataBlocks34 = "";
    String DataBlocks35 = "";
    String DataBlocks36 = "";

    String DataBlocks41 = "";
    String DataBlocks42 = "";
    String DataBlocks43 = "";
    String DataBlocks44 = "";
    String DataBlocks45 = "";
    String DataBlocks46 = "";

    String DataBlocks51 = "";
    String DataBlocks52 = "";
    String DataBlocks53 = "";
    String DataBlocks54 = "";
    String DataBlocks55 = "";
    String DataBlocks56 = "";
    ///////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////Buttons/////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    private void Refresh_Course_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Course_ActionPerformed
        CourseIDArray.clear();
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Course");
            
            //Create a List Model to Store List Items
            DefaultListModel<String> CourseListModel = new DefaultListModel<>();
            
            while(result.next()) 
            {
                CourseListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5));
                CourseIDArray.add(result.getString(1));
            }
            CourseList.setModel(CourseListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Refresh_Course_ActionPerformed

    private void Refresh_Location_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Location_ActionPerformed
        LocationCampusIDArray.clear();
        LocationRoomIDArray.clear();
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Location");
           
            DefaultListModel<String> LocationListModel = new DefaultListModel<>();
            
            while(result.next()) 
            {
                LocationListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                LocationCampusIDArray.add(result.getString(1));
                LocationRoomIDArray.add(result.getString(2));
            }
            LocationList.setModel(LocationListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Refresh_Location_ActionPerformed

    private void Refresh_Semester_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Semester_ActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Semester");
            
            DefaultListModel<String> SemesterListModel = new DefaultListModel<>();
            
            while(result.next()) 
            {
                SemesterListModel.addElement(result.getString(1) + " | " + result.getString(2));
                SemesterYearIDArray.add(result.getString(1));
                SemesterSeasonIDArray.add(result.getString(2));
            }
            SemesterList.setModel(SemesterListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Refresh_Semester_ActionPerformed

    private void TeacherMoveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeacherMoveRightActionPerformed
        SelectedDataModel.addElement(TeacherListLeft.getSelectedValue());
        TeacherListRight.setModel(SelectedDataModel);
    }//GEN-LAST:event_TeacherMoveRightActionPerformed

    private void TeacherMoveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeacherMoveLeftActionPerformed
       SelectedDataModel.removeElement(TeacherListRight.getSelectedValue());
    }//GEN-LAST:event_TeacherMoveLeftActionPerformed
 
    private void Remove_Location_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_Location_ActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            stmt.executeUpdate("DELETE FROM Location WHERE Campus = '" + LocationCampusIDArray.get(LocationList.getSelectedIndex()) + "' AND RoomNo = '" + LocationRoomIDArray.get(LocationList.getSelectedIndex()) + "'");
            ResultSet result = stmt.executeQuery("SELECT * FROM Location");
           
            DefaultListModel<String> LocationListModel = new DefaultListModel<>();
            
            LocationCampusIDArray.clear();
            LocationRoomIDArray.clear();
            
            while(result.next()) 
            {
                LocationListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                LocationCampusIDArray.add(result.getString(1));
                LocationRoomIDArray.add(result.getString(2));
            }
            LocationList.setModel(LocationListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_Remove_Location_ActionPerformed

    private void Refresh_Teacher_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Teacher_ActionPerformed
        TeacherIDArray.clear();
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();      
            ResultSet result = stmt.executeQuery("SELECT * FROM Teacher");

            DefaultListModel<String> TeacherListModel = new DefaultListModel<>();
            
            while(result.next()) 
            {
                TeacherListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                TeacherIDArray.add(result.getString(1));
            }
            TeacherList.setModel(TeacherListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();      
            ResultSet result = stmt.executeQuery("SELECT CourseID FROM Course");
            //Taking all the info from Course table
          
            DefaultListModel<String> TeacherListLeftModel = new DefaultListModel<>();
            DefaultListModel<String> TeacherListRightModel = new DefaultListModel<>();
            //Set the Courses Model

            
            while(result.next()) 
            {
                TeacherListLeftModel.addElement(result.getString(1));
            }
            
            TeacherListLeft.setModel(TeacherListLeftModel); 
            TeacherListRight.setModel(TeacherListRightModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Refresh_Teacher_ActionPerformed

    private void FirstNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameTFActionPerformed
        /////////////////////////USELESS//////////////////////
         /////////////////////////USELESS//////////////////////
          /////////////////////////USELESS//////////////////////
    }//GEN-LAST:event_FirstNameTFActionPerformed

    private void Add_Teacher_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Teacher_ActionPerformed
        //Recive input for adding to Database
        //Text Fields
        String TeacherID = TeacherIDTF.getText();
        String FirstName = FirstNameTF.getText();
        String LastName = LastNameTF.getText();
        
        //String Teacherable = "INFO1111";
        String Teaching = null;
       
        int FilterCheck = 1;
        
        if ("".equals(TeacherID))
        {
            JOptionPane.showMessageDialog(null, "KPU Staff ID Cannot be empty");
            FilterCheck = 0;
        }
        if ("".equals(FirstName))
        {
            JOptionPane.showMessageDialog(null, "First Name Text Field Cannot be empty");
            FilterCheck = 0;
        }
        if ("".equals(LastName))
        {
            JOptionPane.showMessageDialog(null, "Last Name Text Field Cannot be empty");
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            try
            {
                //Create a SQL Connection, Connect the Statement and Create a Query
                Class.forName("com.mysql.jdbc.Driver");
                Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
                Statement stmt = connect.createStatement();       
 
                stmt.executeUpdate("INSERT INTO Teacher(KPUID, FirstName, LastName) VALUES('" + TeacherID + "', '" + FirstName + "', '" + LastName + "')");
                for(int i = 0; i < TeacherListRight.getModel().getSize();i++)
                {
                    Teaching = (TeacherListRight.getModel().getElementAt(i));
                    stmt.executeUpdate("INSERT INTO TeacherAvalibleCourses(KPUID, TeachableCoursesID) VALUES('" + TeacherID + "', '" + Teaching + "')");
                }
                    
                ResultSet result = stmt.executeQuery("SELECT * FROM Teacher");
                     
                DefaultListModel<String> TeacherListModel = new DefaultListModel<>();

                TeacherIDArray.clear();
                while(result.next()) 
                {
                    TeacherListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                    TeacherIDArray.add(result.getString(1));
                }
                TeacherList.setModel(TeacherListModel);
                connect.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Add_Teacher_ActionPerformed

    private void Add_Section_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Section_ActionPerformed
        //Recive input for adding to Database
        //Text Fields
        String CRNID = CRNTF.getText();
        String SectionID = SectionIDTF.getText();

        String CourseID = "null";
        String LoactionCampusID = "null";
        String LoactionRoomID = "null";
        String SemesterYearID = "null";
        String SemesterSeasonID = "null";
        String TeacherID = "null";
        
        boolean SectionTeacherCombo = true;
        boolean SectionLocationCombo = true;
        
        int FilterCheck = 1;
        
        if (SectionCourseList.isSelectionEmpty() == false)
        {
            CourseID = SectionCourseIDArray.get(SectionCourseList.getSelectedIndex());
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select a Course ID");
            FilterCheck = 0;
        }
        
        if (SectionLocationList.isSelectionEmpty() == false)
        {
            LoactionCampusID = SectionLocationCampusIDArray.get(SectionLocationList.getSelectedIndex());
            LoactionRoomID = SectionLocationRoomIDArray.get(SectionLocationList.getSelectedIndex());
            LoactionCampusID = "'" + LoactionCampusID + "'" ;
            LoactionRoomID =  "'" + LoactionRoomID + "'";
        }
        
        if (SectionSemesterList.isSelectionEmpty() == false)
        {
            SemesterYearID = SectionSemesterYearIDArray.get(SectionSemesterList.getSelectedIndex());
            SemesterSeasonID = SectionSemesterSeasonIDArray.get(SectionSemesterList.getSelectedIndex());
        }
        else 
        {
            JOptionPane.showMessageDialog(null, "Please select a Semester");
            FilterCheck = 0;
        }
        
        if (SectionTeacherList.isSelectionEmpty() == false)
        {
            TeacherID = SectionTeacherIDArray.get(SectionTeacherList.getSelectedIndex());
            TeacherID = "'" + TeacherID + "'";
        }
        

        //Radio Buttons
        Time7_10amRB.setActionCommand("\'7am - 9:50am\'");
        Time10_1RB.setActionCommand("\'10am - 12:50pm\'");
        Time1_4RB.setActionCommand("\'1pm - 3:50pm\'");
        Time4_7RB.setActionCommand("\'4pm - 6:50pm\'");
        Time7_10pmRB.setActionCommand("\'7pm - 9:50pm\'");
        NullTimeRB.setActionCommand("null");
        String TimeRBSelection = TimeButtonGroup.getSelection().getActionCommand();
        
        MondayRB.setActionCommand("\'Monday\'");
        TuesdayRB.setActionCommand("\'Tuesday\'");
        WednesdayRB.setActionCommand("\'Wednesday\'");
        ThursdayRB.setActionCommand("\'Thursday\'");
        FridayRB.setActionCommand("\'Friday\'");
        NullDayRB.setActionCommand("\'null\'");
        String DayOfTheWeek = DayOfTheWeekButtonGroup.getSelection().getActionCommand();
       
        
        if (SectionTeacher_CheckBox_.isSelected() == true)
        {
            TeacherID = "null";
        }
        if (SectionLocation_CheckBox_.isSelected() == true)
        {
            LoactionCampusID = "null";
            LoactionRoomID = "null";
        }
       
        
        if ("".equals(CRNID))
        {
            JOptionPane.showMessageDialog(null, "Course Refference ID Text Field Cannot be empty");
            FilterCheck = 0;
        }
        if ("".equals(SectionID))
        {
            JOptionPane.showMessageDialog(null, "Section ID Text Field Cannot be empty");
            FilterCheck = 0;
        }

        
        if (FilterCheck == 1)
        {
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
                Statement stmt = connect.createStatement(); 
                stmt.executeUpdate("INSERT INTO KPUSection(CRNID, SectionID, CourseID, Campus, RoomNo, SemYear, Season, KPUID, DayOfWeek, TimeSlot) "
                    + "VALUES('" + "" + CRNID + "', '" + SectionID + "', '" + CourseID + "', " + LoactionCampusID + ", " + LoactionRoomID + ", '" + SemesterYearID + "', '" + SemesterSeasonID + "', " + TeacherID + ", " + DayOfTheWeek + ", " + TimeRBSelection + ")");
                
               
                //for(int i = 0; i< TeacherListLeft.getModel().getSize();i++)
                //{
                    //Teaching = (TeacherListLeft.getModel().getElementAt(i));
                    //stmt.executeUpdate("INSERT INTO TeacherAvalibleCourses(KPUID, TeachableCoursesID) VALUES('" + TeacherID + "', '" + Teaching + "')");
                //}

                ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection");
                //ResultSet result1 = stmt.executeQuery("SELECT * FROM TeacherAvalibleCourses WHERE KPUID = " + TeacherID);
                //Taking all the info from Teacher table
          
                DefaultListModel<String> SectionListModel = new DefaultListModel<>();
                
                SectionsIDArray.clear();
                while(result.next()) 
                {
                    SectionListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                    SectionsIDArray.add(result.getString(1)); 
                    SectionCourseIDArray.add(result.getString(3));
                    SectionSemesterYearIDArray.add(result.getString(6));
                    SectionSemesterSeasonIDArray.add(result.getString(7));
                    SectionLocationCampusIDArray.add(result.getString(4));
                    SectionLocationRoomIDArray.add(result.getString(5));
                    SectionTeacherIDArray.add(result.getString(8));
                }
                SectionList.setModel(SectionListModel);
                connect.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Add_Section_ActionPerformed

    private void Add_Course_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Course_ActionPerformed
        CourseIDArray.clear();
        //Recive input for adding to Database
        //Text Fields
        String CourseID = CourseIDTF.getText();
        String CourseName = CourseNameTF.getText();
        
        //Radio Buttons
        Year1RB.setActionCommand("Year 1");
        Year2RB.setActionCommand("Year 2");
        Year3RB.setActionCommand("Year 3");
        Year4RB.setActionCommand("Year 4");
        String YearRBSelection = CourseYearTakenButtonGroup.getSelection().getActionCommand();
        
        //ComboBox
        String ProgramCombo = ProgramComboBox.getSelectedItem().toString();
        
        //CheckBox
        boolean ComputerCourseCheckBox = Computer_CourseCB.isSelected();
        int ComputerCourseCheckBoxFinal = 0;
        
        if (ComputerCourseCheckBox == true)
        {
            ComputerCourseCheckBoxFinal = 1;
        }
        else
        {
            ComputerCourseCheckBoxFinal = 0;
        }
        
        int FilterCheck = 1;
        
        if ("".equals(CourseID))
        {
            JOptionPane.showMessageDialog(null, "Course ID Text Field Cannot be empty");
            FilterCheck = 0;
        }
        if ("".equals(CourseName))
        {
            JOptionPane.showMessageDialog(null, "Course Name Text Field Cannot be empty");
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
                Statement stmt = connect.createStatement();       
                stmt.executeUpdate("INSERT INTO Course(CourseID, CourseName, YearToBeTaken, Program, ComputersNeeded) VALUES('" + CourseID + "', '" + CourseName + "', '" + YearRBSelection + "', '" + ProgramCombo + "', '" + ComputerCourseCheckBoxFinal + "')");
                ResultSet result = stmt.executeQuery("SELECT * FROM Course");
                //Taking all the info from Course table
          
                DefaultListModel<String> CourseListModel = new DefaultListModel<>();
                //Set the Courses Model
            
                while(result.next()) 
                {
                    CourseListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5));
                    CourseIDArray.add(result.getString(1));
                }
            
                CourseList.setModel(CourseListModel);
                connect.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }  
        }  
    }//GEN-LAST:event_Add_Course_ActionPerformed

    private void Add_Semester_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Semester_ActionPerformed
        //Recive input for adding to Database
        //Text Field
        String Year = YearTF.getText();
         
        //RadioButtons
        SpringRB.setActionCommand("Spring");
        SummerRB.setActionCommand("Summer");
        FallRB.setActionCommand("Fall");
        WinterRB.setActionCommand("Winter");
        String SeasonRBSelection = SeasonButtonGroup.getSelection().getActionCommand();
        
        int FilterCheck = 1;
        
        if ("".equals(Year))
        {
            JOptionPane.showMessageDialog(null, "Year Text Field Cannot be empty");
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
                Statement stmt = connect.createStatement();       
                stmt.executeUpdate("INSERT INTO Semester(SemYear, Season) VALUES('" + Year + "', '" + SeasonRBSelection + "')");
                ResultSet result = stmt.executeQuery("SELECT * FROM Semester");
                //Taking all the info from Location table
          
                DefaultListModel<String> SemesterListModel = new DefaultListModel<>();
                //Set the Courses Model
            
                while(result.next()) 
                {
                    SemesterListModel.addElement(result.getString(1) + " | " + result.getString(2));
                }
            
                SemesterList.setModel(SemesterListModel);
                connect.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Add_Semester_ActionPerformed

    private void Add_Location_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Location_ActionPerformed
        LocationCampusIDArray.clear();
        LocationRoomIDArray.clear();
        
        //Recive input for adding to Database
        //Text Field
        String Room = RoomTF.getText();
        
        //RadioButtons
        SurreyRB.setActionCommand("Surrey");
        RichmondRB.setActionCommand("Richmond");
        LangleyRB.setActionCommand("Langley");
        CloverdaleRB.setActionCommand("Cloverdale");
        String CampusRBSelection = CampusButtonGroup.getSelection().getActionCommand();
        
        //CheckBox
        boolean ComputerLocationCheckBox = Computer_LocationCB.isSelected();
        int ComputerLocationCheckBoxFinal = 0;
        
        if (ComputerLocationCheckBox == true)
        {
            ComputerLocationCheckBoxFinal = 1;
        }
        else
        {
            ComputerLocationCheckBoxFinal = 0;
        }
        
        int FilterCheck = 1;
        
        if ("".equals(Room))
        {
            JOptionPane.showMessageDialog(null, "Room & Building Text Field Cannot be empty");
            FilterCheck = 0;
        }
        
        if (FilterCheck == 1)
        {
            try
            {
                Class.forName("com.mysql.jdbc.Driver");
                Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
                Statement stmt = connect.createStatement();       
                stmt.executeUpdate("INSERT INTO Location(Campus, RoomNo, ComputersAvalible) VALUES('" + CampusRBSelection + "', '" + Room + "', '" + ComputerLocationCheckBoxFinal + "')");
                ResultSet result = stmt.executeQuery("SELECT * FROM Location");
                //Taking all the info from Location table
          
                DefaultListModel<String> LocationListModel = new DefaultListModel<>();
                //Set the Courses Model
            
                while(result.next()) 
                {
                    LocationListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                    LocationCampusIDArray.add(result.getString(1));
                    LocationRoomIDArray.add(result.getString(2));
                }
            
                LocationList.setModel(LocationListModel);
                connect.close();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_Add_Location_ActionPerformed

    private void Refresh_Section_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Section_ActionPerformed
        //Table 1
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();    
            ResultSet result = stmt.executeQuery("SELECT CourseID FROM Course");
            //Taking all the info from Course table

            DefaultListModel<String> SectionCourseListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            while(result.next()) 
            {
                SectionCourseListModel.addElement(result.getString(1));
                SectionCourseIDArray.add(result.getString(1));
            }
            SectionCourseList.setModel(SectionCourseListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        //Table 2
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();    
            ResultSet result = stmt.executeQuery("SELECT * FROM Location");
            //Taking all the info from Course table

            DefaultListModel<String> SectionLocationListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            while(result.next()) 
            {
                SectionLocationListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                SectionLocationCampusIDArray.add(result.getString(1));
                SectionLocationRoomIDArray.add(result.getString(2));
            }
            SectionLocationList.setModel(SectionLocationListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        //Table 3
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();    
            ResultSet result = stmt.executeQuery("SELECT * FROM Semester");
            //Taking all the info from Course table

            DefaultListModel<String> SectionSemesterListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            while(result.next()) 
            {
                SectionSemesterListModel.addElement(result.getString(1) + " | " + result.getString(2));
                SectionSemesterYearIDArray.add(result.getString(1));
                SectionSemesterSeasonIDArray.add(result.getString(2));
            }
            SectionSemesterList.setModel(SectionSemesterListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();    
            ResultSet result = stmt.executeQuery("SELECT KPUID, FirstName, LastName FROM Teacher");
            //Taking all the info from Course table

            DefaultListModel<String> SectionTeacherListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            while(result.next()) 
            {
                SectionTeacherListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                SectionTeacherIDArray.add(result.getString(1));
            }
            SectionTeacherList.setModel(SectionTeacherListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();      
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection");
            //Taking all the info from Course table
          
            DefaultListModel<String> SectionListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            SectionsIDArray.clear();
            while(result.next()) 
            {
                SectionListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                SectionsIDArray.add(result.getString(1)); 
            }
            SectionList.setModel(SectionListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }         
    }//GEN-LAST:event_Refresh_Section_ActionPerformed

    private void Refresh_Schedule_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_Schedule_ActionPerformed
        ScheduleTeachersIDArray.clear();
        ScheduleSemesterYearIDArray.clear();
        ScheduleSemesterSeasonIDArray.clear();
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Teacher");
            //Taking all the info from Course table

            DefaultComboBoxModel ScheduleComboBoxModel = new DefaultComboBoxModel();

            while(result.next())
            {
                ScheduleComboBoxModel.addElement(result.getString(2) + " " + result.getString(3));
                ScheduleTeachersIDArray.add(result.getString(1));
            }
            ScheduleTeacher_ComboBox_.setModel(ScheduleComboBoxModel);
            //String ProgramCombo = ScheduleComboBox.getSelectedItem().toString();
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Semester");
            //Taking all the info from Course table

            DefaultComboBoxModel ScheduleComboBoxModel = new DefaultComboBoxModel();

            while(result.next())
            {
                ScheduleComboBoxModel.addElement(result.getString(1) + " " + result.getString(2));
                ScheduleSemesterYearIDArray.add(result.getString(1));
                ScheduleSemesterSeasonIDArray.add(result.getString(2));
            }
            ScheduleSemester_ComboBox_.setModel(ScheduleComboBoxModel);
            //String ProgramCombo = ScheduleComboBox.getSelectedItem().toString();
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        //Update With the ComboBox
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection WHERE KPUID = '" + ScheduleTeachersIDArray.get(ScheduleTeacher_ComboBox_.getSelectedIndex()) + "' AND SemYear = '" + ScheduleSemesterYearIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) +  "' AND Season = '" + ScheduleSemesterSeasonIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) + "';");
            //Taking all the info from Course table

            DefaultListModel<String> ScheduleListModel = new DefaultListModel<>();
            DefaultTableModel ScheduleTableModel = (DefaultTableModel) ScheduleTimeTable.getModel();

            int TableDataCounter = 1;
            
            DataBlocks11 = "";
            DataBlocks12 = "";
            DataBlocks13 = "";
            DataBlocks14 = "";
            DataBlocks15 = "";
            DataBlocks16 = "";
            
            DataBlocks21 = "";
            DataBlocks22 = "";
            DataBlocks23 = "";
            DataBlocks24 = "";
            DataBlocks25 = "";
            DataBlocks26 = "";
            
            DataBlocks31 = "";
            DataBlocks32 = "";
            DataBlocks33 = "";
            DataBlocks34 = "";
            DataBlocks35 = "";
            DataBlocks36 = "";
            
            DataBlocks41 = "";
            DataBlocks42 = "";
            DataBlocks43 = "";
            DataBlocks44 = "";
            DataBlocks45 = "";
            DataBlocks46 = "";
            
            DataBlocks51 = "";
            DataBlocks52 = "";
            DataBlocks53 = "";
            DataBlocks54 = "";
            DataBlocks55 = "";
            DataBlocks56 = "";
            
            ScheduleTableModel.removeRow(4);
            ScheduleTableModel.removeRow(3);
            ScheduleTableModel.removeRow(2);
            ScheduleTableModel.removeRow(1);
            ScheduleTableModel.removeRow(0); 

            List<String> ScheduleTableArrayList = new ArrayList<String>();
            
            while(result.next())
            {
                ScheduleListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                
                
                //If Statement To Set Table
                if (result.getString(9) != null && result.getString(10) != null)
                {
                    if ("Monday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks11 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks21 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks31 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks41 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks51 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Tuesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks12 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks22 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks32 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks42 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks52 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Wednesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks13 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks23 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks33 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks43 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks53 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Thurday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks14 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks24 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks34 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks44 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks54 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Friday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks15 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks25 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks35 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks45 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks55 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }  
                }
                else
                {
                    if (TableDataCounter == 1)
                    {
                        DataBlocks16 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 2) 
                    {
                        DataBlocks26 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 3) 
                    {
                        DataBlocks36 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 4) 
                    {
                        DataBlocks46 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 5) 
                    {
                        DataBlocks56 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else 
                    {
                        JOptionPane.showMessageDialog(null, "Too Many Courses!");
                    }
                    TableDataCounter++;
                }
            }
            
            String[] TableRow1 = {"7am - 9:50am", DataBlocks11, DataBlocks12, DataBlocks13, DataBlocks14, DataBlocks15, DataBlocks16};
            String[] TableRow2 = {"10am - 12:50pm", DataBlocks21, DataBlocks22, DataBlocks23, DataBlocks24, DataBlocks25, DataBlocks26};
            String[] TableRow3 = {"1pm - 3:50pm", DataBlocks31, DataBlocks32, DataBlocks33, DataBlocks34, DataBlocks35, DataBlocks36};
            String[] TableRow4 = {"4pm - 6:50pm", DataBlocks41, DataBlocks42, DataBlocks43, DataBlocks44, DataBlocks45, DataBlocks46};
            String[] TableRow5 = {"7pm - 9:50pm", DataBlocks51, DataBlocks52, DataBlocks53, DataBlocks54, DataBlocks55, DataBlocks56};
            

            //ScheduleTimeTable.setFont(new Font("Serif", Font.PLAIN, 10));
            
            ScheduleTableModel.addRow(TableRow1);
            ScheduleTableModel.addRow(TableRow2);
            ScheduleTableModel.addRow(TableRow3);
            ScheduleTableModel.addRow(TableRow4);
            ScheduleTableModel.addRow(TableRow5);
 
            ScheduleList.setModel(ScheduleListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        } 
    }//GEN-LAST:event_Refresh_Schedule_ActionPerformed

    private void ScheduleTeacher_ComboBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleTeacher_ComboBox_ActionPerformed
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection WHERE KPUID = '" + ScheduleTeachersIDArray.get(ScheduleTeacher_ComboBox_.getSelectedIndex()) + "' AND SemYear = '" + ScheduleSemesterYearIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) +  "' AND Season = '" + ScheduleSemesterSeasonIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) + "';");
            //Taking all the info from Course table

            DefaultListModel<String> ScheduleListModel = new DefaultListModel<>();
            DefaultTableModel ScheduleTableModel = (DefaultTableModel) ScheduleTimeTable.getModel();

            TableDataCounter = 1;
            
            DataBlocks11 = "";
            DataBlocks12 = "";
            DataBlocks13 = "";
            DataBlocks14 = "";
            DataBlocks15 = "";
            DataBlocks16 = "";
            
            DataBlocks21 = "";
            DataBlocks22 = "";
            DataBlocks23 = "";
            DataBlocks24 = "";
            DataBlocks25 = "";
            DataBlocks26 = "";
            
            DataBlocks31 = "";
            DataBlocks32 = "";
            DataBlocks33 = "";
            DataBlocks34 = "";
            DataBlocks35 = "";
            DataBlocks36 = "";
            
            DataBlocks41 = "";
            DataBlocks42 = "";
            DataBlocks43 = "";
            DataBlocks44 = "";
            DataBlocks45 = "";
            DataBlocks46 = "";
            
            DataBlocks51 = "";
            DataBlocks52 = "";
            DataBlocks53 = "";
            DataBlocks54 = "";
            DataBlocks55 = "";
            DataBlocks56 = "";
            
            ScheduleTableModel.removeRow(4);
            ScheduleTableModel.removeRow(3);
            ScheduleTableModel.removeRow(2);
            ScheduleTableModel.removeRow(1);
            ScheduleTableModel.removeRow(0); 

            List<String> ScheduleTableArrayList = new ArrayList<String>();
            
            while(result.next())
            {
                ScheduleListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                ScheduleTableArrayList.add(result.getString(10) + result.getString(9));
                
                //If Statement To Set Table
               if (result.getString(9) != null && result.getString(10) != null)
                {
                    if ("Monday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks11 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks21 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks31 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks41 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks51 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Tuesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks12 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks22 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks32 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks42 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks52 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Wednesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks13 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks23 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks33 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks43 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks53 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Thurday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks14 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks24 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks34 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks44 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks54 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Friday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks15 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks25 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks35 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks45 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks55 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }  
                }
                else
                {
                    if (TableDataCounter == 1)
                    {
                        DataBlocks16 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 2) 
                    {
                        DataBlocks26 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 3) 
                    {
                        DataBlocks36 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 4) 
                    {
                        DataBlocks46 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 5) 
                    {
                        DataBlocks56 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else 
                    {
                        JOptionPane.showMessageDialog(null, "Too Many Courses!");
                    }
                    TableDataCounter++;
                }
            }
            
            String[] TableRow1 = {"7am - 9:50am", DataBlocks11, DataBlocks12, DataBlocks13, DataBlocks14, DataBlocks15, DataBlocks16};
            String[] TableRow2 = {"10am - 12:50pm", DataBlocks21, DataBlocks22, DataBlocks23, DataBlocks24, DataBlocks25, DataBlocks26};
            String[] TableRow3 = {"1pm - 3:50pm", DataBlocks31, DataBlocks32, DataBlocks33, DataBlocks34, DataBlocks35, DataBlocks36};
            String[] TableRow4 = {"4pm - 6:50pm", DataBlocks41, DataBlocks42, DataBlocks43, DataBlocks44, DataBlocks45, DataBlocks46};
            String[] TableRow5 = {"7pm - 9:50pm", DataBlocks51, DataBlocks52, DataBlocks53, DataBlocks54, DataBlocks55, DataBlocks56};
            
            ScheduleTableModel.addRow(TableRow1);
            ScheduleTableModel.addRow(TableRow2);
            ScheduleTableModel.addRow(TableRow3);
            ScheduleTableModel.addRow(TableRow4);
            ScheduleTableModel.addRow(TableRow5);
 
            ScheduleList.setModel(ScheduleListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_ScheduleTeacher_ComboBox_ActionPerformed

    private void PDF_SelectedTeacherSchedule_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PDF_SelectedTeacherSchedule_ActionPerformed
       try
        {
            DateTimeFormatter DateFormat = DateTimeFormatter.ofPattern("MM-dd-yyyy");
            LocalDateTime TimeStamp = LocalDateTime.now();
            
            String TeacherName = ScheduleTeacher_ComboBox_.getSelectedItem().toString();
            String SemesterYear = ScheduleSemester_ComboBox_.getSelectedItem().toString();
            String Date = (DateFormat.format(TimeStamp));
            
            String PDFFileName = TeacherName + " Schedule " + SemesterYear + " " + Date + ".pdf";
            String DesktopPath = System.getProperty("user.home") + "\\" + "Desktop";
            
            Document doc = new Document();
            PdfWriter.getInstance (doc, new FileOutputStream(DesktopPath + "\\" + PDFFileName));
            
            doc.open();
            
            PdfPTable pdftable = new PdfPTable(7);

            pdftable.setTotalWidth(550);
            pdftable.setLockedWidth(true);
      
            
            pdftable.addCell("Times");
            pdftable.addCell("Monday");
            pdftable.addCell("Tuesday");
            pdftable.addCell("Wednesday");
            pdftable.addCell("Thursday");
            pdftable.addCell("Friday");
            pdftable.addCell("No Date");
           
            pdftable.addCell("7am - 9:50am");
            pdftable.addCell(DataBlocks11);
            pdftable.addCell(DataBlocks12);
            pdftable.addCell(DataBlocks13);
            pdftable.addCell(DataBlocks14);
            pdftable.addCell(DataBlocks15);
            pdftable.addCell(DataBlocks16);
            
            pdftable.addCell("10am - 12:50pm");
            pdftable.addCell(DataBlocks21);
            pdftable.addCell(DataBlocks22);
            pdftable.addCell(DataBlocks23);
            pdftable.addCell(DataBlocks24);
            pdftable.addCell(DataBlocks25);
            pdftable.addCell(DataBlocks26);
            
            pdftable.addCell("1pm - 3:50pm");
            pdftable.addCell(DataBlocks31);
            pdftable.addCell(DataBlocks32);
            pdftable.addCell(DataBlocks33);
            pdftable.addCell(DataBlocks34);
            pdftable.addCell(DataBlocks35);
            pdftable.addCell(DataBlocks36);
            
            pdftable.addCell("4pm - 6:50pm");
            pdftable.addCell(DataBlocks41);
            pdftable.addCell(DataBlocks42);
            pdftable.addCell(DataBlocks43);
            pdftable.addCell(DataBlocks44);
            pdftable.addCell(DataBlocks45);
            pdftable.addCell(DataBlocks46);
            
            pdftable.addCell("7pm - 9:50pm");
            pdftable.addCell(DataBlocks51);
            pdftable.addCell(DataBlocks52);
            pdftable.addCell(DataBlocks53);
            pdftable.addCell(DataBlocks54);
            pdftable.addCell(DataBlocks55);
            pdftable.addCell(DataBlocks56);
            
            doc.add(new Paragraph(TeacherName + "'s " + SemesterYear + " Schedule"));
            doc.add(new Paragraph("Created: " + Date));
            doc.add(new Paragraph(Chunk.NEWLINE));
            doc.add(pdftable);
            
            doc.close();
            
            JOptionPane.showMessageDialog(null, "PDF Successfully Created!");
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_PDF_SelectedTeacherSchedule_ActionPerformed

    private void Remove_Semester_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_Semester_ActionPerformed
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();       
            stmt.executeUpdate("DELETE FROM Semester WHERE SemYear = '" + SemesterYearIDArray.get(SemesterList.getSelectedIndex()) + "' AND Season = '" + SemesterSeasonIDArray.get(SemesterList.getSelectedIndex()) + "'");
            ResultSet result = stmt.executeQuery("SELECT * FROM Semester");
            //Taking all the info from Location table
          
            DefaultListModel<String> SemesterListModel = new DefaultListModel<>();
            //Set the Courses Model
            
            SemesterYearIDArray.clear();
            SemesterSeasonIDArray.clear();
            
            while(result.next()) 
            {
                SemesterListModel.addElement(result.getString(1) + " | " + result.getString(2));
                SemesterYearIDArray.add(result.getString(1));
                SemesterSeasonIDArray.add(result.getString(2));
            }
            
            SemesterList.setModel(SemesterListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Remove_Semester_ActionPerformed

    private void Remove_Course_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_Course_ActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            stmt.executeUpdate("DELETE FROM Course WHERE CourseID = '" + CourseIDArray.get(CourseList.getSelectedIndex()) + "'");
            ResultSet result = stmt.executeQuery("SELECT * FROM Course");
            
            //Create a List Model to Store List Items
            DefaultListModel<String> CourseListModel = new DefaultListModel<>();
            
            CourseIDArray.clear();
            
            while(result.next()) 
            {
                CourseListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5));
                CourseIDArray.add(result.getString(1));
            }
            CourseList.setModel(CourseListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Remove_Course_ActionPerformed

    private void Show_TeachableCourses_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show_TeachableCourses_ActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();      
            ResultSet result = stmt.executeQuery("SELECT TeachableCoursesID FROM TeacherAvalibleCourses WHERE KPUID = " + "'" + TeacherIDArray.get(TeacherList.getSelectedIndex()) + "'");

            DefaultListModel<String> TeachersCoursesListModel = new DefaultListModel<>();
            
            while(result.next()) 
            {
                TeachersCoursesListModel.addElement(result.getString(1));
            }
            TeachersCourseList.setModel(TeachersCoursesListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
         //ResultSet result = stmt.executeQuery("SELECT Teacher.KPUID, Teacher.FirstName, Teacher.LastName, TeacherAvalibleCourses.TeachableCoursesID FROM Teacher LEFT OUTER JOIN TeacherAvalibleCourses ON Teacher.KPUID = TeacherAvalibleCourses.KPUID;");
    }//GEN-LAST:event_Show_TeachableCourses_ActionPerformed

    private void SectionTeacher_CheckBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SectionTeacher_CheckBox_ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SectionTeacher_CheckBox_ActionPerformed

    private void ScheduleSemester_ComboBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleSemester_ComboBox_ActionPerformed
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection WHERE KPUID = '" + ScheduleTeachersIDArray.get(ScheduleTeacher_ComboBox_.getSelectedIndex()) + "' AND SemYear = '" + ScheduleSemesterYearIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) +  "' AND Season = '" + ScheduleSemesterSeasonIDArray.get(ScheduleSemester_ComboBox_.getSelectedIndex()) + "';");
            //Taking all the info from Course table

            DefaultListModel<String> ScheduleListModel = new DefaultListModel<>();
            DefaultTableModel ScheduleTableModel = (DefaultTableModel) ScheduleTimeTable.getModel();

            int TableDataCounter = 1;
            
            DataBlocks11 = "";
            DataBlocks12 = "";
            DataBlocks13 = "";
            DataBlocks14 = "";
            DataBlocks15 = "";
            DataBlocks16 = "";
            
            DataBlocks21 = "";
            DataBlocks22 = "";
            DataBlocks23 = "";
            DataBlocks24 = "";
            DataBlocks25 = "";
            DataBlocks26 = "";
            
            DataBlocks31 = "";
            DataBlocks32 = "";
            DataBlocks33 = "";
            DataBlocks34 = "";
            DataBlocks35 = "";
            DataBlocks36 = "";
            
            DataBlocks41 = "";
            DataBlocks42 = "";
            DataBlocks43 = "";
            DataBlocks44 = "";
            DataBlocks45 = "";
            DataBlocks46 = "";
            
            DataBlocks51 = "";
            DataBlocks52 = "";
            DataBlocks53 = "";
            DataBlocks54 = "";
            DataBlocks55 = "";
            DataBlocks56 = "";
            
            ScheduleTableModel.removeRow(4);
            ScheduleTableModel.removeRow(3);
            ScheduleTableModel.removeRow(2);
            ScheduleTableModel.removeRow(1);
            ScheduleTableModel.removeRow(0); 

            
            
            List<String> ScheduleTableArrayList = new ArrayList<String>();
            
            while(result.next())
            {
                ScheduleListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                ScheduleTableArrayList.add(result.getString(9) + result.getString(10));
                
                //If Statement To Set Table
                if (result.getString(9) != null && result.getString(10) != null)
                {
                    if ("Monday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks11 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks21 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks31 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks41 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks51 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Tuesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks12 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks22 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks32 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks42 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks52 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Wednesday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks13 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks23 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks33 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks43 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks53 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Thurday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks14 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks24 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks34 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks44 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks54 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }
                    else if ("Friday".equals(result.getString(9))) 
                    {
                        if ("7am - 9:50am".equals(result.getString(10))) 
                        {
                            DataBlocks15 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("10am - 12:50pm".equals(result.getString(10)))
                        {
                            DataBlocks25 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("1pm - 3:50pm".equals(result.getString(10)))
                        {
                            DataBlocks35 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("4pm - 6:50pm".equals(result.getString(10)))
                        {
                            DataBlocks45 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                        else if ("7pm - 9:50pm".equals(result.getString(10)))
                        {
                            DataBlocks55 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                        }
                    }  
                }
                else
                {
                    if (TableDataCounter == 1)
                    {
                        DataBlocks16 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 2) 
                    {
                        DataBlocks26 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 3) 
                    {
                        DataBlocks36 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 4) 
                    {
                        DataBlocks46 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else if (TableDataCounter == 5) 
                    {
                        DataBlocks56 = (result.getString(3) + " (" + result.getString(2) + ") " + System.lineSeparator() + result.getString(4) + " " + result.getString(5));
                    }
                    else 
                    {
                        JOptionPane.showMessageDialog(null, "Too Many Courses!");
                    }
                    TableDataCounter++;
                }
            }
            
            String[] TableRow1 = {"7am - 9:50am", DataBlocks11, DataBlocks12, DataBlocks13, DataBlocks14, DataBlocks15, DataBlocks16};
            String[] TableRow2 = {"10am - 12:50pm", DataBlocks21, DataBlocks22, DataBlocks23, DataBlocks24, DataBlocks25, DataBlocks26};
            String[] TableRow3 = {"1pm - 3:50pm", DataBlocks31, DataBlocks32, DataBlocks33, DataBlocks34, DataBlocks35, DataBlocks36};
            String[] TableRow4 = {"4pm - 6:50pm", DataBlocks41, DataBlocks42, DataBlocks43, DataBlocks44, DataBlocks45, DataBlocks46};
            String[] TableRow5 = {"7pm - 9:50pm", DataBlocks51, DataBlocks52, DataBlocks53, DataBlocks54, DataBlocks55, DataBlocks56};
            
            ScheduleTableModel.addRow(TableRow1);
            ScheduleTableModel.addRow(TableRow2);
            ScheduleTableModel.addRow(TableRow3);
            ScheduleTableModel.addRow(TableRow4);
            ScheduleTableModel.addRow(TableRow5);
 
            ScheduleList.setModel(ScheduleListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }             
    }//GEN-LAST:event_ScheduleSemester_ComboBox_ActionPerformed

    private void SectionLocation_CheckBox_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SectionLocation_CheckBox_ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SectionLocation_CheckBox_ActionPerformed

    private void RemoveSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSectionActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            stmt.executeUpdate("DELETE FROM KPUSection WHERE CRNID = '" + SectionsIDArray.get(SectionList.getSelectedIndex()) + "'");
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection");
            
            //Create a List Model to Store List Items
            DefaultListModel<String> SectionListModel = new DefaultListModel<>();
            
            SectionsIDArray.clear();
            
            while(result.next()) 
            {
                SectionListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3) + " | " + result.getString(4) + " | " + result.getString(5) + " | " + result.getString(6) + " | " + result.getString(7) + " | " + result.getString(8) + " | " + result.getString(9) + " | " + result.getString(10));
                SectionsIDArray.add(result.getString(1));
            }
            SectionList.setModel(SectionListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_RemoveSectionActionPerformed

    private void Calculate_ClassesToSections_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Calculate_ClassesToSections_ActionPerformed
        //Setting All Locations
        List<String> ScheduleLocationCampusArrayList = new ArrayList<>();
        List<String> ScheduleLocationRoomArrayList = new ArrayList<>();
        List<String> ScheduleLocationComputersArrayList = new ArrayList<>();
        
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Location");
    
            
            while(result.next()) 
            {
                ScheduleLocationCampusArrayList.add(result.getString(1));
                ScheduleLocationRoomArrayList.add(result.getString(2));
                ScheduleLocationComputersArrayList.add(result.getString(3));
                System.out.println();
            }
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        
        
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection");
            

            List<String> AllSections = new ArrayList<>();
            
            List<String> MissingTimeLoactionComp = new ArrayList<>();
            List<String> MissingLoactionComp = new ArrayList<>();
            List<String> MissingTimeComp = new ArrayList<>();
            
            List<String> MissingTimeLoactionYear = new ArrayList<>();
            List<String> MissingLoactionYear = new ArrayList<>();
            List<String> MissingTimeYear = new ArrayList<>();
            
            List<String> MissingTimeLoaction = new ArrayList<>();
            List<String> MissingLoaction = new ArrayList<>();
            List<String> MissingTime = new ArrayList<>();
            
       

            while(result.next()) 
            {
                
                AllSections.add(result.getString(1));
                   
            
                //No Day And No Location
                if ((result.getString(4) == null || "".equals(result.getString(4)) || result.getString(5) == null || "".equals(result.getString(5))) && (result.getString(9) == null || "".equals(result.getString(9))) || result.getString(10) == null || "".equals(result.getString(10)))
                {
                    //if (??? Needs Computers ???)
                    {
                        MissingTimeLoactionComp.add(result.getString(1));
                    }
                    //else
                    {
                        MissingTimeLoaction.add(result.getString(1));
                    }
                }
                
                /*
                //No Location
                else if (result.getString(4) == null || "".equals(result.getString(4)) || result.getString(5) == null || "".equals(result.getString(5)))
                {
                    {
                        MissingLoactionComp.add(result.getString(1));
                        AmountOfSectionsToBeSorted++;
                    }
                    //else
                    {
                        MissingLoaction.add(result.getString(1));
                        AmountOfSectionsToBeSorted++;
                    }
                }
                
                //No Time
                else if (result.getString(9) == null || "".equals(result.getString(9)) || result.getString(10) == null || "".equals(result.getString(10)))
                {
                    {
                        MissingTimeComp.add(result.getString(1));
                        AmountOfSectionsToBeSorted++;
                    }
                    //else
                    {
                        MissingTime.add(result.getString(1));
                        AmountOfSectionsToBeSorted++;
                    }
                }
            }
            */
            }
            
            //JOptionPane.showMessageDialog(null, "MARKER 2");
            
            /*
            //Reading Values For Testing
            //Computers
            for (int counter = 0; counter < MissingTimeLoactionComp.size(); counter++) 
            { 		      
                System.out.println(MissingTimeLoactionComp.get(counter)); 
                
                AmountOfSectionsToBeSorted++;
                
                //set AmountOfSectionsToBeSorted.time
     
                
                
                
                
                
                
            }
            for (int counter = 0; counter < MissingLoactionComp.size(); counter++) 
            { 		      
                System.out.println(MissingLoactionComp.get(counter)); 		
            }
            for (int counter = 0; counter < MissingTimeComp.size(); counter++) 
            { 		      
                System.out.println(MissingTimeComp.get(counter)); 		
            }
            */
            
            List<String> ToBeAssignedCRN = new ArrayList<>();
            List<String> ToBeAssignedCampus = new ArrayList<>();
            List<String> ToBeAssignedRoom = new ArrayList<>();
            List<String> ToBeAssignedDay = new ArrayList<>();
            List<String> ToBeAssignedTime = new ArrayList<>();
            
            int counter = 0; 
            int SectionUpdateCounter = 0;
            
            int LocationCounter = 0;
            int LocationCounters = 0;
            int DayCounter = 0;
            int TimeCounter = 0;
            String CRN = "";
            String CurrentDay = "";
            String CurrentTime = "";
            String CurrentCampus = "";
            String CurrentRoom = "";
            
            ///////////////////////////////////////////////////////////////////
            ///////////Set Array Lists for the No Computers Sections///////////
            ///////////////////////////////////////////////////////////////////
            while ((LocationCounter < ScheduleLocationCampusArrayList.size()) && (counter < AllSections.size()))
            {
                CurrentCampus = ScheduleLocationCampusArrayList.get(LocationCounter);
                CurrentRoom = ScheduleLocationRoomArrayList.get(LocationCounter);
                
                
                System.out.println(CurrentCampus + " " + CurrentRoom);
                
                DayCounter = 0;
                
                while ((DayCounter < 5) && (counter < AllSections.size()))
                {
                    if (DayCounter == 0){CurrentDay = "Monday";}
                    if (DayCounter == 1){CurrentDay = "Tuesday";}
                    if (DayCounter == 2){CurrentDay = "Wednesday";}
                    if (DayCounter == 3){CurrentDay = "Thursday";}
                    if (DayCounter == 4){CurrentDay = "Friday";}

                    TimeCounter = 0;
                    
                    while ((TimeCounter < 5) && (counter < AllSections.size()))
                    {
                        if (TimeCounter == 0){CurrentTime = "7am - 9:50am";}
                        if (TimeCounter == 1){CurrentTime = "10am - 12:50pm";}
                        if (TimeCounter == 2){CurrentTime = "1pm - 3:50pm";}
                        if (TimeCounter == 3){CurrentTime = "4pm - 6:50pm";}
                        if (TimeCounter == 4){CurrentTime = "7pm - 9:50pm";}
                       
                        System.out.println(AllSections.get(counter) + " " + counter + " " + AllSections.size());
                        //System.out.println(TimeCounter);
                        //System.out.println(DayCounter);
                                 
                        CRN = AllSections.get(counter);

                        ToBeAssignedCRN.add(CRN); 
                        ToBeAssignedCampus.add(CurrentCampus); 
                        ToBeAssignedRoom.add(CurrentRoom); 
                        ToBeAssignedDay.add(CurrentDay); 
                        ToBeAssignedTime.add(CurrentTime); 
                        
                        System.out.println(CurrentCampus + CurrentRoom);
                        counter++;
                        TimeCounter++;
                    }
                    DayCounter++;
                }
                if (LocationCounters >= 15)
                {
                    LocationCounter++;
                    LocationCounters = 0;
                }
                LocationCounters++;
            }
            
            
            ///////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////SET TO DB No Computers Sections/////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////
            while (SectionUpdateCounter < ToBeAssignedCRN.size())
            {
                String DBCRN = ToBeAssignedCRN.get(SectionUpdateCounter);
                String DBCampus = ToBeAssignedCampus.get(SectionUpdateCounter);
                String DBRoom = ToBeAssignedRoom.get(SectionUpdateCounter);
                String DBDay = ToBeAssignedDay.get(SectionUpdateCounter);
                String DBTime = ToBeAssignedTime.get(SectionUpdateCounter);    
    
                //YOU NEED TO GET 15X THE VALUE OF ScheduleLocationCampusArrayList INTO THE ARRAY, SO THAT THE VALUE REPEATS FOR EACH DAY AND TIME
                
                stmt.executeUpdate("UPDATE KPUSection SET Campus = '" + DBCampus + "', RoomNo = '" + DBRoom + "', DayOfWeek = '" + DBDay + "', TimeSlot = '" + DBTime + "' WHERE CRNID = " + DBCRN);
                
                SectionUpdateCounter++;
            }
            
            
            /*
            for (int counter = 0; counter < MissingLoaction.size(); counter++) 
            { 		      
                System.out.println(MissingLoaction.get(counter)); 		
            }
            for (int counter = 0; counter < MissingTime.size(); counter++) 
            { 		      
                System.out.println(MissingTime.get(counter)); 		
            }
            
            */
            JOptionPane.showMessageDialog(null, "Sections Have Been Auto-Assigned Times");
             
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Calculate_ClassesToSections_ActionPerformed

    private void Calculate_TeachersToSections_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Calculate_TeachersToSections_ActionPerformed
        List<String> ScheduleTeacherIDArrayList = new ArrayList<>();
        List<String> ScheduleTeachableCoursesArrayList = new ArrayList<>();
        List<String> ScheduleLocationComputersArrayList = new ArrayList<>();
        
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM Teacher");
    
            while(result.next()) 
            {
                ScheduleTeacherIDArrayList.add(result.getString(1));
            }
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            ResultSet result = stmt.executeQuery("SELECT * FROM KPUSection");
            

            List<String> AllSections = new ArrayList<>();
            
            List<String> MissingTeacher = new ArrayList<>();
            
            
            ///////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////Get Data for Positions///////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////
            while(result.next()) 
            {
                AllSections.add(result.getString(1));
                   
                //No Teacher
                if ((result.getString(4) == null || "".equals(result.getString(4)) || result.getString(5) == null || "".equals(result.getString(5))) && (result.getString(9) == null || "".equals(result.getString(9))) || result.getString(10) == null || "".equals(result.getString(10)))
                {
                    MissingTeacher.add(result.getString(1));
                }
            }
            
            
            ///////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////SET Data to Positions///////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////
            List<String> ToBeAssignedCRN = new ArrayList<>();
            List<String> ToBeAssignedTeacher = new ArrayList<>();
            
            
            int counter = 0; 
            int SectionUpdateCounter = 0;
            
            int TeacherCounter = 0;
            int LocationCounters = 0;
            int DayCounter = 0;
            int TimeCounter = 0;
            String CRN = "";
            String CurrentTeacher = "";
            
            
            ///////////////////////////////////////////////////////////////////
            ///////////Set Array Lists for the No Computers Sections///////////
            ///////////////////////////////////////////////////////////////////
            while ((TeacherCounter < ScheduleTeacherIDArrayList.size()) && (counter < AllSections.size()))
            {
                if (counter % 2 == 1)
                {
                    CurrentTeacher = ScheduleTeacherIDArrayList.get(TeacherCounter);
                
                    CRN = AllSections.get(counter);
                    ToBeAssignedTeacher.add(CurrentTeacher);
                    ToBeAssignedCRN.add(CRN);
                    
                    counter++;
                    
                    CRN = AllSections.get(counter);
                    ToBeAssignedTeacher.add(CurrentTeacher);
                    ToBeAssignedCRN.add(CRN);
                }
                else 
                {
                    CurrentTeacher = ScheduleTeacherIDArrayList.get(TeacherCounter);
                
                    CRN = AllSections.get(counter);
                    ToBeAssignedTeacher.add(CurrentTeacher);
                    ToBeAssignedCRN.add(CRN);
                    
                    counter++;
                    TeacherCounter++;
                }
                
                
                System.out.println(CurrentTeacher + " " + counter);      
            }
            
            
            ///////////////////////////////////////////////////////////////////////////////////
            ///////////////////////////SET TO DB Teachers//////////////////////////////////////
            ///////////////////////////////////////////////////////////////////////////////////
            while (SectionUpdateCounter < ToBeAssignedCRN.size())
            {
                String DBCRN = ToBeAssignedCRN.get(SectionUpdateCounter);
                String DBTeacher = ToBeAssignedTeacher.get(SectionUpdateCounter);
                
                //JOptionPane.showMessageDialog(null, DBCRN );
                //YOU NEED TO GET 15X THE VALUE OF ScheduleLocationCampusArrayList INTO THE ARRAY, SO THAT THE VALUE REPEATS FOR EACH DAY AND TIME
                
                stmt.executeUpdate("UPDATE KPUSection SET KPUID = '" + DBTeacher + "' WHERE CRNID = " + DBCRN);
                
                SectionUpdateCounter++;
            }
            
            JOptionPane.showMessageDialog(null, "Sections Have Been Auto-Assigned Teachers");
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Calculate_TeachersToSections_ActionPerformed

    private void Remove_Teacher_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Remove_Teacher_ActionPerformed
        try
        {
            //Create a SQL Connection, Connect the Statement and Create a Query
            Class.forName("com.mysql.jdbc.Driver");
            Connection connect = DriverManager.getConnection("jdbc:mysql://kpuclasssql.cd4sls0dpuge.us-east-2.rds.amazonaws.com:3306/KPUClassScheduler", "MasterLoginID", "Thisisapassword");
            Statement stmt = connect.createStatement();
            stmt.executeUpdate("DELETE FROM Teacher WHERE KPUID = '" + TeacherIDArray.get(TeacherList.getSelectedIndex()) + "'");
            ResultSet result = stmt.executeQuery("SELECT * FROM Teacher");

            //Create a List Model to Store List Items
            DefaultListModel<String> TeacherListModel = new DefaultListModel<>();
            
            TeacherIDArray.clear();
            
            while(result.next()) 
            {
                TeacherListModel.addElement(result.getString(1) + " | " + result.getString(2) + " | " + result.getString(3));
                TeacherIDArray.add(result.getString(1));
            }
            TeacherList.setModel(TeacherListModel);
            connect.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_Remove_Teacher_ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Course_;
    private javax.swing.JButton Add_Location_;
    private javax.swing.JButton Add_Section_;
    private javax.swing.JButton Add_Semester_;
    private javax.swing.JButton Add_Teacher_;
    private javax.swing.JTextField CRNTF;
    private javax.swing.JButton Calculate_ClassesToSections_;
    private javax.swing.JButton Calculate_TeachersToSections_;
    private javax.swing.ButtonGroup CampusButtonGroup;
    private javax.swing.JRadioButton CloverdaleRB;
    private javax.swing.JCheckBox Computer_CourseCB;
    private javax.swing.JCheckBox Computer_LocationCB;
    private javax.swing.JTextField CourseIDTF;
    private javax.swing.JList<String> CourseList;
    private javax.swing.JTextField CourseNameTF;
    private javax.swing.JPanel CoursePanel;
    private javax.swing.ButtonGroup CourseYearTakenButtonGroup;
    private javax.swing.ButtonGroup DayOfTheWeekButtonGroup;
    private javax.swing.JRadioButton FallRB;
    private javax.swing.JTextField FirstNameTF;
    private javax.swing.JRadioButton FridayRB;
    private javax.swing.JRadioButton LangleyRB;
    private javax.swing.JTextField LastNameTF;
    private javax.swing.JList<String> LocationList;
    private javax.swing.JPanel LocationPanel;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JRadioButton MondayRB;
    private javax.swing.JRadioButton NullDayRB;
    private javax.swing.JRadioButton NullTimeRB;
    private javax.swing.JButton PDF_SelectedTeacherSchedule_;
    private javax.swing.JComboBox<String> ProgramComboBox;
    private javax.swing.JButton Refresh_Course_;
    private javax.swing.JButton Refresh_Location_;
    private javax.swing.JButton Refresh_Schedule_;
    private javax.swing.JButton Refresh_Section_;
    private javax.swing.JButton Refresh_Semester_;
    private javax.swing.JButton Refresh_Teacher_;
    private javax.swing.JButton RemoveSection;
    private javax.swing.JButton Remove_Course_;
    private javax.swing.JButton Remove_Location_;
    private javax.swing.JButton Remove_Semester_;
    private javax.swing.JButton Remove_Teacher_;
    private javax.swing.JRadioButton RichmondRB;
    private javax.swing.JTextField RoomTF;
    private javax.swing.JList<String> ScheduleList;
    private javax.swing.JPanel SchedulePanel;
    private javax.swing.JComboBox<String> ScheduleSemester_ComboBox_;
    private javax.swing.JComboBox<String> ScheduleTeacher_ComboBox_;
    private javax.swing.JTable ScheduleTimeTable;
    private javax.swing.ButtonGroup SeasonButtonGroup;
    private javax.swing.JList<String> SectionCourseList;
    private javax.swing.JTextField SectionIDTF;
    private javax.swing.JList<String> SectionList;
    private javax.swing.JList<String> SectionLocationList;
    private javax.swing.JCheckBox SectionLocation_CheckBox_;
    private javax.swing.JPanel SectionPanel;
    private javax.swing.JList<String> SectionSemesterList;
    private javax.swing.JList<String> SectionTeacherList;
    private javax.swing.JCheckBox SectionTeacher_CheckBox_;
    private javax.swing.JList<String> SemesterList;
    private javax.swing.JPanel SemesterPanel;
    private javax.swing.JButton Show_TeachableCourses_;
    private javax.swing.JRadioButton SpringRB;
    private javax.swing.JRadioButton SummerRB;
    private javax.swing.JRadioButton SurreyRB;
    private javax.swing.JTextField TeacherIDTF;
    private javax.swing.JList<String> TeacherList;
    private javax.swing.JList<String> TeacherListLeft;
    private javax.swing.JList<String> TeacherListRight;
    private javax.swing.JButton TeacherMoveLeft;
    private javax.swing.JButton TeacherMoveRight;
    private javax.swing.JPanel TeacherPanel;
    private javax.swing.JList<String> TeachersCourseList;
    private javax.swing.JRadioButton ThursdayRB;
    private javax.swing.JRadioButton Time10_1RB;
    private javax.swing.JRadioButton Time1_4RB;
    private javax.swing.JRadioButton Time4_7RB;
    private javax.swing.JRadioButton Time7_10amRB;
    private javax.swing.JRadioButton Time7_10pmRB;
    private javax.swing.ButtonGroup TimeButtonGroup;
    private javax.swing.JRadioButton TuesdayRB;
    private javax.swing.JRadioButton WednesdayRB;
    private javax.swing.JRadioButton WinterRB;
    private javax.swing.JRadioButton Year1RB;
    private javax.swing.JRadioButton Year2RB;
    private javax.swing.JRadioButton Year3RB;
    private javax.swing.JRadioButton Year4RB;
    private javax.swing.JTextField YearTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables
}
